version: "3.8"

services:
  gomcp-server:
    build:
      context: . # Build context is the root directory
      dockerfile: examples/server/Dockerfile # Specify the Dockerfile location
    image: gomcp-server-example # Explicit image name
    container_name: gomcp_server_example
    # For stdio interaction, we need to run it interactively
    # and potentially attach stdin/stdout.
    # This docker-compose setup primarily defines the build.
    # Running stdio-based services interactively via compose is less common.
    stdin_open: true # Keep stdin open for piping
    tty: false # Do NOT allocate pseudo-TTY for piping

# --- How to Run ---
#
# This setup is primarily for building the server image. Running and interacting
# with an stdio-based service like this via Docker Compose requires specific `docker run` commands.
#
# 1. Build the server image:
#    docker compose build gomcp-server
#
# 2. Run the server container interactively, attaching stdio:
#    docker run -i --rm --name my_gomcp_server gomcp-server-example
#
# 3. Run the client locally and pipe its output to the container's stdin:
#    (Open a separate terminal)
#    go run ./examples/basic/client/main.go | docker exec -i my_gomcp_server sh -c 'cat > /dev/stdin'
#    (Note: This piping method might be complex and shell-dependent.
#     A simpler approach for testing might be to run both client and server locally.)
#
# --- Alternative (Network Transport) ---
# If the server used network sockets instead of stdio, compose could manage both:
# services:
#   gomcp-server:
#     build: ...
#     ports:
#       - "8080:8080" # Example port mapping
#   gomcp-client:
#     build:
#       context: .
#       dockerfile: examples/basic/client/Dockerfile # Needs a client Dockerfile
#     depends_on:
#       - gomcp-server
#     environment:
#       MCP_SERVER_ADDRESS: "gomcp-server:8080" # Example env var
