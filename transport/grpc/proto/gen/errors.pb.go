// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: errors.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorCode defines standardized error codes for the MCP protocol
type ErrorCode int32

const (
	// No error
	ErrorCode_NO_ERROR ErrorCode = 0
	// JSON-RPC standard error codes mapped to gRPC
	ErrorCode_PARSE_ERROR        ErrorCode = -32700 // Parse error
	ErrorCode_INVALID_REQUEST    ErrorCode = -32600 // Invalid Request
	ErrorCode_METHOD_NOT_FOUND   ErrorCode = -32601 // Method not found
	ErrorCode_INVALID_PARAMS     ErrorCode = -32602 // Invalid params
	ErrorCode_INTERNAL_ERROR     ErrorCode = -32603 // Internal error
	ErrorCode_SERVER_ERROR_RANGE ErrorCode = -32000 // Server error (start of range)
	// MCP specific error codes
	ErrorCode_INITIALIZATION_FAILED     ErrorCode = 1000 // Failed to initialize the MCP connection
	ErrorCode_AUTHENTICATION_FAILED     ErrorCode = 1001 // Authentication failed
	ErrorCode_AUTHORIZATION_FAILED      ErrorCode = 1002 // Authorization failed
	ErrorCode_SESSION_EXPIRED           ErrorCode = 1003 // Session expired
	ErrorCode_FUNCTION_EXECUTION_FAILED ErrorCode = 1004 // Function execution failed
	ErrorCode_INVALID_SESSION           ErrorCode = 1005 // Invalid session ID
	ErrorCode_RATE_LIMITED              ErrorCode = 1006 // Request rate limited
	ErrorCode_STREAM_CLOSED             ErrorCode = 1007 // Stream was closed
	ErrorCode_TIMEOUT                   ErrorCode = 1008 // Operation timed out
	ErrorCode_CONNECTION_ERROR          ErrorCode = 1009 // Connection error
	ErrorCode_PROTOCOL_ERROR            ErrorCode = 1010 // Protocol violation
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:      "NO_ERROR",
		-32700: "PARSE_ERROR",
		-32600: "INVALID_REQUEST",
		-32601: "METHOD_NOT_FOUND",
		-32602: "INVALID_PARAMS",
		-32603: "INTERNAL_ERROR",
		-32000: "SERVER_ERROR_RANGE",
		1000:   "INITIALIZATION_FAILED",
		1001:   "AUTHENTICATION_FAILED",
		1002:   "AUTHORIZATION_FAILED",
		1003:   "SESSION_EXPIRED",
		1004:   "FUNCTION_EXECUTION_FAILED",
		1005:   "INVALID_SESSION",
		1006:   "RATE_LIMITED",
		1007:   "STREAM_CLOSED",
		1008:   "TIMEOUT",
		1009:   "CONNECTION_ERROR",
		1010:   "PROTOCOL_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":                  0,
		"PARSE_ERROR":               -32700,
		"INVALID_REQUEST":           -32600,
		"METHOD_NOT_FOUND":          -32601,
		"INVALID_PARAMS":            -32602,
		"INTERNAL_ERROR":            -32603,
		"SERVER_ERROR_RANGE":        -32000,
		"INITIALIZATION_FAILED":     1000,
		"AUTHENTICATION_FAILED":     1001,
		"AUTHORIZATION_FAILED":      1002,
		"SESSION_EXPIRED":           1003,
		"FUNCTION_EXECUTION_FAILED": 1004,
		"INVALID_SESSION":           1005,
		"RATE_LIMITED":              1006,
		"STREAM_CLOSED":             1007,
		"TIMEOUT":                   1008,
		"CONNECTION_ERROR":          1009,
		"PROTOCOL_ERROR":            1010,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

// GrpcStatusCode defines a mapping to/from gRPC status codes
type GrpcStatusCode int32

const (
	// Standard gRPC status codes
	GrpcStatusCode_OK                  GrpcStatusCode = 0
	GrpcStatusCode_CANCELLED           GrpcStatusCode = 1
	GrpcStatusCode_UNKNOWN             GrpcStatusCode = 2
	GrpcStatusCode_INVALID_ARGUMENT    GrpcStatusCode = 3
	GrpcStatusCode_DEADLINE_EXCEEDED   GrpcStatusCode = 4
	GrpcStatusCode_NOT_FOUND           GrpcStatusCode = 5
	GrpcStatusCode_ALREADY_EXISTS      GrpcStatusCode = 6
	GrpcStatusCode_PERMISSION_DENIED   GrpcStatusCode = 7
	GrpcStatusCode_RESOURCE_EXHAUSTED  GrpcStatusCode = 8
	GrpcStatusCode_FAILED_PRECONDITION GrpcStatusCode = 9
	GrpcStatusCode_ABORTED             GrpcStatusCode = 10
	GrpcStatusCode_OUT_OF_RANGE        GrpcStatusCode = 11
	GrpcStatusCode_UNIMPLEMENTED       GrpcStatusCode = 12
	GrpcStatusCode_INTERNAL            GrpcStatusCode = 13
	GrpcStatusCode_UNAVAILABLE         GrpcStatusCode = 14
	GrpcStatusCode_DATA_LOSS           GrpcStatusCode = 15
	GrpcStatusCode_UNAUTHENTICATED     GrpcStatusCode = 16
)

// Enum value maps for GrpcStatusCode.
var (
	GrpcStatusCode_name = map[int32]string{
		0:  "OK",
		1:  "CANCELLED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
		16: "UNAUTHENTICATED",
	}
	GrpcStatusCode_value = map[string]int32{
		"OK":                  0,
		"CANCELLED":           1,
		"UNKNOWN":             2,
		"INVALID_ARGUMENT":    3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATA_LOSS":           15,
		"UNAUTHENTICATED":     16,
	}
)

func (x GrpcStatusCode) Enum() *GrpcStatusCode {
	p := new(GrpcStatusCode)
	*p = x
	return p
}

func (x GrpcStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[1].Descriptor()
}

func (GrpcStatusCode) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[1]
}

func (x GrpcStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcStatusCode.Descriptor instead.
func (GrpcStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{1}
}

// ErrorMapping maps between error code systems
type ErrorMapping struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	McpErrorCode   ErrorCode              `protobuf:"varint,1,opt,name=mcp_error_code,json=mcpErrorCode,proto3,enum=mcp.ErrorCode" json:"mcp_error_code,omitempty"`
	GrpcStatusCode GrpcStatusCode         `protobuf:"varint,2,opt,name=grpc_status_code,json=grpcStatusCode,proto3,enum=mcp.GrpcStatusCode" json:"grpc_status_code,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ErrorMapping) Reset() {
	*x = ErrorMapping{}
	mi := &file_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMapping) ProtoMessage() {}

func (x *ErrorMapping) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMapping.ProtoReflect.Descriptor instead.
func (*ErrorMapping) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorMapping) GetMcpErrorCode() ErrorCode {
	if x != nil {
		return x.McpErrorCode
	}
	return ErrorCode_NO_ERROR
}

func (x *ErrorMapping) GetGrpcStatusCode() GrpcStatusCode {
	if x != nil {
		return x.GrpcStatusCode
	}
	return GrpcStatusCode_OK
}

func (x *ErrorMapping) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Standard error mappings
type ErrorMappings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mappings      []*ErrorMapping        `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorMappings) Reset() {
	*x = ErrorMappings{}
	mi := &file_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMappings) ProtoMessage() {}

func (x *ErrorMappings) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMappings.ProtoReflect.Descriptor instead.
func (*ErrorMappings) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorMappings) GetMappings() []*ErrorMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

var File_errors_proto protoreflect.FileDescriptor

const file_errors_proto_rawDesc = "" +
	"\n" +
	"\ferrors.proto\x12\x03mcp\"\xa5\x01\n" +
	"\fErrorMapping\x124\n" +
	"\x0emcp_error_code\x18\x01 \x01(\x0e2\x0e.mcp.ErrorCodeR\fmcpErrorCode\x12=\n" +
	"\x10grpc_status_code\x18\x02 \x01(\x0e2\x13.mcp.GrpcStatusCodeR\x0egrpcStatusCode\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\">\n" +
	"\rErrorMappings\x12-\n" +
	"\bmappings\x18\x01 \x03(\v2\x11.mcp.ErrorMappingR\bmappings*\xcb\x03\n" +
	"\tErrorCode\x12\f\n" +
	"\bNO_ERROR\x10\x00\x12\x18\n" +
	"\vPARSE_ERROR\x10Ā\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1c\n" +
	"\x0fINVALID_REQUEST\x10\xa8\x81\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1d\n" +
	"\x10METHOD_NOT_FOUND\x10\xa7\x81\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1b\n" +
	"\x0eINVALID_PARAMS\x10\xa6\x81\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1b\n" +
	"\x0eINTERNAL_ERROR\x10\xa5\x81\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1f\n" +
	"\x12SERVER_ERROR_RANGE\x10\x80\x86\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x1a\n" +
	"\x15INITIALIZATION_FAILED\x10\xe8\a\x12\x1a\n" +
	"\x15AUTHENTICATION_FAILED\x10\xe9\a\x12\x19\n" +
	"\x14AUTHORIZATION_FAILED\x10\xea\a\x12\x14\n" +
	"\x0fSESSION_EXPIRED\x10\xeb\a\x12\x1e\n" +
	"\x19FUNCTION_EXECUTION_FAILED\x10\xec\a\x12\x14\n" +
	"\x0fINVALID_SESSION\x10\xed\a\x12\x11\n" +
	"\fRATE_LIMITED\x10\xee\a\x12\x12\n" +
	"\rSTREAM_CLOSED\x10\xef\a\x12\f\n" +
	"\aTIMEOUT\x10\xf0\a\x12\x15\n" +
	"\x10CONNECTION_ERROR\x10\xf1\a\x12\x13\n" +
	"\x0ePROTOCOL_ERROR\x10\xf2\a*\xc1\x02\n" +
	"\x0eGrpcStatusCode\x12\x06\n" +
	"\x02OK\x10\x00\x12\r\n" +
	"\tCANCELLED\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x02\x12\x14\n" +
	"\x10INVALID_ARGUMENT\x10\x03\x12\x15\n" +
	"\x11DEADLINE_EXCEEDED\x10\x04\x12\r\n" +
	"\tNOT_FOUND\x10\x05\x12\x12\n" +
	"\x0eALREADY_EXISTS\x10\x06\x12\x15\n" +
	"\x11PERMISSION_DENIED\x10\a\x12\x16\n" +
	"\x12RESOURCE_EXHAUSTED\x10\b\x12\x17\n" +
	"\x13FAILED_PRECONDITION\x10\t\x12\v\n" +
	"\aABORTED\x10\n" +
	"\x12\x10\n" +
	"\fOUT_OF_RANGE\x10\v\x12\x11\n" +
	"\rUNIMPLEMENTED\x10\f\x12\f\n" +
	"\bINTERNAL\x10\r\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x0e\x12\r\n" +
	"\tDATA_LOSS\x10\x0f\x12\x13\n" +
	"\x0fUNAUTHENTICATED\x10\x10B2Z0github.com/localrivet/gomcp/transport/grpc/protob\x06proto3"

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData []byte
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_errors_proto_rawDesc), len(file_errors_proto_rawDesc)))
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_errors_proto_goTypes = []any{
	(ErrorCode)(0),        // 0: mcp.ErrorCode
	(GrpcStatusCode)(0),   // 1: mcp.GrpcStatusCode
	(*ErrorMapping)(nil),  // 2: mcp.ErrorMapping
	(*ErrorMappings)(nil), // 3: mcp.ErrorMappings
}
var file_errors_proto_depIdxs = []int32{
	0, // 0: mcp.ErrorMapping.mcp_error_code:type_name -> mcp.ErrorCode
	1, // 1: mcp.ErrorMapping.grpc_status_code:type_name -> mcp.GrpcStatusCode
	2, // 2: mcp.ErrorMappings.mappings:type_name -> mcp.ErrorMapping
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_errors_proto_rawDesc), len(file_errors_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
		MessageInfos:      file_errors_proto_msgTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
