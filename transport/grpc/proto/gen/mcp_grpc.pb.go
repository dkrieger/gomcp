// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mcp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MCP_Initialize_FullMethodName      = "/mcp.MCP/Initialize"
	MCP_StreamMessages_FullMethodName  = "/mcp.MCP/StreamMessages"
	MCP_StreamEvents_FullMethodName    = "/mcp.MCP/StreamEvents"
	MCP_ExecuteFunction_FullMethodName = "/mcp.MCP/ExecuteFunction"
	MCP_EndSession_FullMethodName      = "/mcp.MCP/EndSession"
)

// MCPClient is the client API for MCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MCP service definition
type MCPClient interface {
	// Initialize establishes a new MCP session
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// StreamMessages establishes a bidirectional stream for exchanging messages
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MCPMessage, MCPMessage], error)
	// StreamEvents establishes a unidirectional stream for server to client events
	StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventMessage], error)
	// ExecuteFunction executes a function and returns the result
	ExecuteFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error)
	// EndSession terminates an active MCP session
	EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error)
}

type mCPClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPClient(cc grpc.ClientConnInterface) MCPClient {
	return &mCPClient{cc}
}

func (c *mCPClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, MCP_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MCPMessage, MCPMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MCP_ServiceDesc.Streams[0], MCP_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MCPMessage, MCPMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCP_StreamMessagesClient = grpc.BidiStreamingClient[MCPMessage, MCPMessage]

func (c *mCPClient) StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MCP_ServiceDesc.Streams[1], MCP_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, EventMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCP_StreamEventsClient = grpc.ServerStreamingClient[EventMessage]

func (c *mCPClient) ExecuteFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionResponse)
	err := c.cc.Invoke(ctx, MCP_ExecuteFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndSessionResponse)
	err := c.cc.Invoke(ctx, MCP_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServer is the server API for MCP service.
// All implementations must embed UnimplementedMCPServer
// for forward compatibility.
//
// MCP service definition
type MCPServer interface {
	// Initialize establishes a new MCP session
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// StreamMessages establishes a bidirectional stream for exchanging messages
	StreamMessages(grpc.BidiStreamingServer[MCPMessage, MCPMessage]) error
	// StreamEvents establishes a unidirectional stream for server to client events
	StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[EventMessage]) error
	// ExecuteFunction executes a function and returns the result
	ExecuteFunction(context.Context, *FunctionRequest) (*FunctionResponse, error)
	// EndSession terminates an active MCP session
	EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error)
	mustEmbedUnimplementedMCPServer()
}

// UnimplementedMCPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMCPServer struct{}

func (UnimplementedMCPServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedMCPServer) StreamMessages(grpc.BidiStreamingServer[MCPMessage, MCPMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMCPServer) StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[EventMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedMCPServer) ExecuteFunction(context.Context, *FunctionRequest) (*FunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFunction not implemented")
}
func (UnimplementedMCPServer) EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedMCPServer) mustEmbedUnimplementedMCPServer() {}
func (UnimplementedMCPServer) testEmbeddedByValue()             {}

// UnsafeMCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServer will
// result in compilation errors.
type UnsafeMCPServer interface {
	mustEmbedUnimplementedMCPServer()
}

func RegisterMCPServer(s grpc.ServiceRegistrar, srv MCPServer) {
	// If the following call pancis, it indicates UnimplementedMCPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MCP_ServiceDesc, srv)
}

func _MCP_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MCPServer).StreamMessages(&grpc.GenericServerStream[MCPMessage, MCPMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCP_StreamMessagesServer = grpc.BidiStreamingServer[MCPMessage, MCPMessage]

func _MCP_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MCPServer).StreamEvents(m, &grpc.GenericServerStream[EventStreamRequest, EventMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCP_StreamEventsServer = grpc.ServerStreamingServer[EventMessage]

func _MCP_ExecuteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).ExecuteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_ExecuteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).ExecuteFunction(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).EndSession(ctx, req.(*EndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCP_ServiceDesc is the grpc.ServiceDesc for MCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCP",
	HandlerType: (*MCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _MCP_Initialize_Handler,
		},
		{
			MethodName: "ExecuteFunction",
			Handler:    _MCP_ExecuteFunction_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _MCP_EndSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MCP_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _MCP_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mcp.proto",
}
