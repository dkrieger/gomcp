# Task ID: 2
# Title: Implement Schema Package
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create a schema package that supports JSON Schema generation from Go structs and validation for both MCP specification versions.
# Details:
Implement a schema package that handles JSON Schema generation and validation:

1. Create functions to generate JSON Schema from Go structs
2. Support both 2025-03-26 and 2024-11-05 schema versions
3. Implement validation functions for input/output validation
4. Handle case sensitivity issues in field names
5. Support structs without explicit JSON tags

Example implementation:
```go
package schema

import (
    "reflect"
    "encoding/json"
    "github.com/your-org/gomcp/protocol"
)

// GenerateSchema creates a JSON schema from a Go struct
func GenerateSchema(v interface{}, version string) (map[string]interface{}, error) {
    // Implementation that handles different versions
    t := reflect.TypeOf(v)
    schema := make(map[string]interface{})
    
    // Add schema version based on MCP version
    if version == protocol.VersionLatest {
        schema["$schema"] = "http://json-schema.org/draft-07/schema#"
    } else {
        schema["$schema"] = "http://json-schema.org/draft-04/schema#"
    }
    
    // Process struct fields and build schema
    // ...
    
    return schema, nil
}

// ValidateAgainstSchema validates data against a JSON schema
func ValidateAgainstSchema(data interface{}, schema map[string]interface{}) error {
    // Implementation
    // ...
    return nil
}
```

# Test Strategy:
Create comprehensive tests with various Go struct types including nested structs, arrays, maps, and custom types. Test schema generation for both MCP versions. Verify validation works correctly with valid and invalid inputs. Test edge cases like case sensitivity and missing JSON tags.
