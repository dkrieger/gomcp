# Task ID: 13
# Title: Implement Prompt Registration and Handling
# Status: done
# Dependencies: 10
# Priority: medium
# Description: Implement prompt registration and handling functionality in the server package.
# Details:
Implement prompt registration and handling:

```go
// server/prompt.go
package server

// PromptTemplate represents a prompt template
type PromptTemplate struct {
	Role    string
	Content string
}

// Prompt represents a registered prompt
type Prompt struct {
	Name        string
	Description string
	Templates   []PromptTemplate
	Schema      map[string]interface{}
	// Additional fields
}

// system creates a system prompt template
func system(content string) PromptTemplate {
	return PromptTemplate{Role: "system", Content: content}
}

// user creates a user prompt template
func user(content string) PromptTemplate {
	return PromptTemplate{Role: "user", Content: content}
}

// assistant creates an assistant prompt template
func assistant(content string) PromptTemplate {
	return PromptTemplate{Role: "assistant", Content: content}
}

// registerPrompt registers a prompt with the server
func (s *Server) registerPrompt(name, description string, templates []PromptTemplate) *Server {
	// Implementation
	return s
}

// handlePrompt handles a prompt request
func (s *Server) handlePrompt(ctx *Context, name string, args map[string]interface{}) (interface{}, error) {
	// Implementation
}
```

Implement template variable substitution:

```go
// Substitute variables in a template
func substituteVariables(template string, vars map[string]interface{}) (string, error) {
	// Replace {{variable}} with the corresponding value
}
```

# Test Strategy:
Create unit tests for prompt registration with various templates. Test prompt handling with valid and invalid arguments. Test template variable substitution. Test error handling for missing or invalid prompts.
