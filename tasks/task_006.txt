# Task ID: 6
# Title: Implement Structured Logging (slog) Package
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Implement or refine the structured logging package (util/slog) to provide flexible, configurable logging for the library.
# Details:
Implement a structured logging package that supports:

```go
// util/slog/logger.go
package slog

// LogLevel represents logging severity levels
type LogLevel int

const (
	LevelDebug LogLevel = iota
	LevelInfo
	LevelWarn
	LevelError
)

// Logger provides structured logging capabilities
type Logger struct {
	// Implementation details
}

// NewLogger creates a new logger with the given options
func NewLogger(options ...Option) *Logger {
	// Implementation
}

// Option represents a logger configuration option
type Option func(*Logger)

// WithLevel sets the logger's level
func WithLevel(level LogLevel) Option {
	// Implementation
}

// WithOutput sets the logger's output destination
func WithOutput(output io.Writer) Option {
	// Implementation
}

// WithFormat sets the logger's output format
func WithFormat(format string) Option {
	// Implementation
}

// Log methods
func (l *Logger) Debug(msg string, fields ...Field) {}
func (l *Logger) Info(msg string, fields ...Field) {}
func (l *Logger) Warn(msg string, fields ...Field) {}
func (l *Logger) Error(msg string, fields ...Field) {}
```

Implement support for:
- Multiple output formats (JSON, text)
- File, stdout, stderr output options
- Log file rotation with timestamps
- Runtime log level adjustment
- Structured fields for context

# Test Strategy:
Create unit tests for all logger functionality. Test different output formats, log levels, and output destinations. Test log rotation functionality. Test concurrent logging from multiple goroutines.
