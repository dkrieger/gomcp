# Task ID: 5
# Title: Implement Transport Interface and Stdio Transport
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create the transport interface and implement the stdio transport for local inter-process communication.
# Details:
Define a transport interface and implement stdio transport:

1. Create a Transport interface in the protocol package
2. Implement a stdio transport that uses standard input/output
3. Support request/response communication
4. Handle serialization/deserialization of messages
5. Implement proper error handling

Example implementation:
```go
// In protocol package
type Transport interface {
    Connect() error
    Disconnect() error
    Send(message interface{}) error
    Receive() (interface{}, error)
    // Additional methods
}

// In transport/stdio package
package stdio

import (
    "bufio"
    "encoding/json"
    "io"
    "os"
    "github.com/your-org/gomcp/protocol"
)

type StdioTransport struct {
    reader *bufio.Reader
    writer *bufio.Writer
}

func NewStdioTransport() *StdioTransport {
    return &StdioTransport{
        reader: bufio.NewReader(os.Stdin),
        writer: bufio.NewWriter(os.Stdout),
    }
}

func (t *StdioTransport) Connect() error {
    // Implementation
    return nil
}

// Additional methods
```

# Test Strategy:
Create unit tests for the stdio transport using io.Pipe to simulate stdin/stdout. Test sending and receiving various message types. Verify error handling for malformed messages. Test with large messages to ensure buffering works correctly. Create integration tests that spawn child processes to test real stdio communication.
