# Task ID: 5
# Title: Implement Version Detection and Negotiation
# Status: done
# Dependencies: 2, 3, 4
# Priority: high
# Description: Create a version detection and negotiation system that automatically handles different MCP specification versions.
# Details:
Implement a version detection and negotiation system in the mcp package:

```go
// mcp/version.go
package mcp

// VersionDetector detects and negotiates MCP versions
type VersionDetector struct {
	// Implementation details
}

// DetectVersion determines the appropriate MCP version based on a message
func (d *VersionDetector) DetectVersion(message []byte) (string, error) {
	// Parse message and extract version
	// Return appropriate version string
}

// NegotiateVersion handles version negotiation between client and server
func (d *VersionDetector) NegotiateVersion(clientVersions []string, serverVersions []string) (string, error) {
	// Implement version negotiation logic
	// Return the highest mutually supported version
}
```

Ensure the system can:
1. Automatically detect the version from incoming messages
2. Negotiate the highest mutually supported version
3. Provide appropriate type adapters for converting between versions
4. Handle unknown or unsupported versions gracefully

# Test Strategy:
Create unit tests for version detection with messages from all supported versions. Test negotiation with various version combinations. Test edge cases like unknown versions, malformed version strings, and empty version lists.
