# Task ID: 7
# Title: Implement Schema Generation and Validation
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement or refine the schema generation and validation package (util/schema) to support automatic JSON Schema generation from Go structs.
# Details:
Implement a schema generation and validation package that supports:

```go
// util/schema/schema.go
package schema

// Generator creates JSON Schema from Go structs
type Generator struct {
	// Implementation details
}

// NewGenerator creates a new schema generator
func NewGenerator() *Generator {
	// Implementation
}

// GenerateSchema generates a JSON Schema from a Go struct type
func (g *Generator) GenerateSchema(v interface{}) (map[string]interface{}, error) {
	// Use reflection to analyze struct fields and tags
	// Generate appropriate JSON Schema
}

// Validator validates data against a schema
type Validator struct {
	// Implementation details
}

// NewValidator creates a new schema validator
func NewValidator(schema map[string]interface{}) *Validator {
	// Implementation
}

// Validate validates data against the schema
func (v *Validator) Validate(data interface{}) error {
	// Validate data against schema
}
```

Implement support for struct tags:
- `required:"true"` - Mark fields as required
- `enum:"value1,value2"` - Restrict string values
- `min:"0" max:"100"` - Set numeric boundaries
- `format:"email"` - Validate string formats
- `default:"value"` - Set default values
- `description:"text"` - Add field descriptions

# Test Strategy:
Create unit tests for schema generation with various struct types and tags. Test validation against generated schemas with valid and invalid data. Test edge cases like nested structs, arrays, and maps.
