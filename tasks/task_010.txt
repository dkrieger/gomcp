# Task ID: 10
# Title: Implement Server Core
# Status: done
# Dependencies: 5, 6, 7, 8, 9
# Priority: high
# Description: Implement the core server functionality in the server package, including the server struct and basic methods.
# Details:
Implement the core server functionality:

```go
// server/server.go
package server

// Server represents an MCP server
type Server struct {
	name        string
	tools       map[string]*Tool
	resources   map[string]*Resource
	prompts     map[string]*Prompt
	root        RootHandler
	transport   Transport
	logger      *slog.Logger
	versionDetector *mcp.VersionDetector
	// Additional fields
}

// NewServer creates a new MCP server
func NewServer(name string, options ...Option) *Server {
	// Implementation
}

// Option represents a server configuration option
type Option func(*Server)

// WithLogger sets the server's logger
func WithLogger(logger *slog.Logger) Option {
	// Implementation
}

// Tool registers a tool with the server
func (s *Server) Tool(name, description string, handler ToolHandler) *Server {
	// Implementation
	return s
}

// Resource registers a resource with the server
func (s *Server) Resource(path, description string, handler ResourceHandler) *Server {
	// Implementation
	return s
}

// Prompt registers a prompt with the server
func (s *Server) Prompt(name, description string, templates ...PromptTemplate) *Server {
	// Implementation
	return s
}

// Root sets the root resource handler
func (s *Server) Root(handler RootHandler) *Server {
	// Implementation
	return s
}

// Run starts the server
func (s *Server) Run() error {
	// Implementation
}
```

Implement the server context:

```go
// server/context.go
package server

// Context represents the context for a server request
type Context struct {
	Request  *Request
	Response *Response
	Logger   *slog.Logger
	// Additional fields
}

// Request represents an incoming request
type Request struct {
	// Implementation
}

// Response represents an outgoing response
type Response struct {
	// Implementation
}
```

# Test Strategy:
Create unit tests for server creation and configuration. Test registering tools, resources, and prompts. Test the server context. Mock the transport layer for testing.
