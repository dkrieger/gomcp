# Task ID: 4
# Title: Implement Client Package
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Create the client-side package that allows applications to connect to MCP servers and utilize their tools, resources, and prompts.
# Details:
Implement the client package for connecting to MCP servers:

1. Create a Client struct that implements the MCPClient interface
2. Implement methods for discovering available tools, resources, and prompts
3. Add methods for calling tools and accessing resources
4. Implement error handling and response parsing
5. Support protocol version negotiation

Example implementation:
```go
package client

import (
    "github.com/your-org/gomcp/protocol"
    "github.com/your-org/gomcp/schema"
)

type Client struct {
    transport protocol.Transport
    version   string
}

func NewClient(transport protocol.Transport, options ...Option) *Client {
    c := &Client{
        transport: transport,
        version:   protocol.VersionLatest,
    }
    
    for _, opt := range options {
        opt(c)
    }
    
    return c
}

func (c *Client) ListTools() ([]protocol.ToolInfo, error) {
    // Implementation
    // ...
    return nil, nil
}

func (c *Client) CallTool(name string, args interface{}) (interface{}, error) {
    // Implementation with validation
    // ...
    return nil, nil
}

// Additional methods
```

# Test Strategy:
Create unit tests for client creation and configuration. Test tool discovery and calling with mock responses. Verify error handling works correctly. Test with different protocol versions to ensure compatibility. Use mock transports to simulate various server responses and error conditions.
