# Task ID: 8
# Title: Implement Argument Validation Package
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement or refine the argument validation package (util/validator) to provide flexible validation for function arguments.
# Details:
Implement an argument validation package that supports:

```go
// util/validator/validator.go
package validator

// Validator provides validation functionality
type Validator struct {
	errors []error
}

// NewValidator creates a new validator
func NewValidator() *Validator {
	return &Validator{}
}

// Required validates that a value is not nil or empty
func (v *Validator) Required(name string, value interface{}) *Validator {
	// Implementation
	return v
}

// Min validates that a numeric value is at least min
func (v *Validator) Min(name string, value, min float64) *Validator {
	// Implementation
	return v
}

// Max validates that a numeric value is at most max
func (v *Validator) Max(name string, value, max float64) *Validator {
	// Implementation
	return v
}

// Enum validates that a string value is one of the allowed values
func (v *Validator) Enum(name string, value string, allowed ...string) *Validator {
	// Implementation
	return v
}

// Format validates that a string matches a format pattern
func (v *Validator) Format(name string, value string, format string) *Validator {
	// Implementation
	return v
}

// Error returns the first validation error or nil if there are none
func (v *Validator) Error() error {
	if len(v.errors) == 0 {
		return nil
	}
	return v.errors[0]
}

// Errors returns all validation errors
func (v *Validator) Errors() []error {
	return v.errors
}
```

Implement support for common validations:
- Required values
- Numeric ranges
- String formats
- Enum values
- Custom validation functions

# Test Strategy:
Create unit tests for all validation functions with valid and invalid inputs. Test chaining multiple validations. Test error messages for clarity and correctness.
