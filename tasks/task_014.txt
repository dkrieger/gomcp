# Task ID: 14
# Title: Implement Transport Interface
# Status: done
# Dependencies: 5
# Priority: high
# Description: Define the transport interface and implement common transport functionality.
# Details:
Define the transport interface:

```go
// transport/transport.go
package transport

// Transport represents a transport layer for MCP communication
type Transport interface {
	// Initialize initializes the transport
	Initialize() error
	
	// Start starts the transport
	Start() error
	
	// Stop stops the transport
	Stop() error
	
	// Send sends a message
	Send(message []byte) error
	
	// Receive receives a message
	Receive() ([]byte, error)
	
	// SetMessageHandler sets the message handler
	SetMessageHandler(handler MessageHandler)
}

// MessageHandler represents a function that handles incoming messages
type MessageHandler func(message []byte) ([]byte, error)

// BaseTransport provides common transport functionality
type BaseTransport struct {
	handler MessageHandler
	// Additional fields
}

// SetMessageHandler sets the message handler
func (t *BaseTransport) SetMessageHandler(handler MessageHandler) {
	t.handler = handler
}

// HandleMessage handles an incoming message
func (t *BaseTransport) HandleMessage(message []byte) ([]byte, error) {
	if t.handler == nil {
		return nil, errors.New("no message handler set")
	}
	return t.handler(message)
}
```

# Test Strategy:
Create unit tests for the base transport functionality. Test message handling with various message types. Test error handling for missing handlers.
