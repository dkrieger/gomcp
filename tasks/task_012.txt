# Task ID: 12
# Title: Implement Resource Registration and Handling
# Status: done
# Dependencies: 10
# Priority: high
# Description: Implement resource registration and handling functionality in the server package.
# Details:
Implement resource registration and handling:

```go
// server/resource.go
package server

// ResourceHandler represents a resource handler function
type ResourceHandler func(ctx *Context, args interface{}) (interface{}, error)

// Resource represents a registered resource
type Resource struct {
	Path        string
	Description string
	Handler     ResourceHandler
	Schema      map[string]interface{}
	// Additional fields
}

// registerResource registers a resource with the server
func (s *Server) registerResource(path, description string, handler ResourceHandler, schema map[string]interface{}) *Server {
	// Implementation
	return s
}

// handleResource handles a resource request
func (s *Server) handleResource(ctx *Context, path string, args map[string]interface{}) (interface{}, error) {
	// Implementation
}
```

Implement path parameter extraction:

```go
// Extract path parameters from a URL path
func extractPathParams(pattern, path string) (map[string]string, bool) {
	// Parse pattern and path to extract parameters
	// Return parameters and whether the path matches the pattern
}

// Convert path parameters to struct fields
func convertPathParams(params map[string]string, args map[string]interface{}, paramType reflect.Type) (interface{}, error) {
	// Convert path parameters to the appropriate struct fields
}
```

# Test Strategy:
Create unit tests for resource registration with various handler signatures. Test resource handling with valid and invalid paths. Test path parameter extraction and conversion. Test error handling for missing or invalid resources.
