{"/docs/basic_usage/":{"data":{"basic-usage#Basic Usage":"Basic UsageThe core logic for building MCP servers and clients resides in the server, client, and protocol packages within the gomcp library.\nFor concrete examples demonstrating how to:\nImplement MCP servers using various transports (Stdio, SSE, WebSocket). Integrate servers with different Go HTTP frameworks (Gin, Echo, Fiber, Chi, etc.). Implement MCP clients. Load server configuration from files (JSON, YAML, TOML). Handle features like authentication or rate limiting. Please refer to the directories within the examples/ folder.\nEach example directory is structured as a self-contained Go module where applicable. Detailed instructions for running specific examples can be found in the examples/README.md file."},"title":"Basic Usage"},"/examples/protocol_messages/":{"data":{"notification-messages#Notification Messages":"initialized Sent from the client to the server after the client has received and processed the initialize result, indicating readiness.\nParameters (InitializedNotificationParams):\n(None) - The params object is empty. notifications/message Sent from the server to the client to provide a log message. This is typically used when the server’s logging capabilities are enabled.\nParameters (LoggingMessageParams):\nlevel (string, required): The severity level of the log message (\"error\", \"warn\", \"info\", \"debug\", \"trace\"). message (string, required): The log message content. $/cancelled Sent from the client to the server to indicate that a previously sent request should be cancelled.\nParameters (CancelledParams):\nid (integer | string, required): The ID of the request to be cancelled. $/progress Sent from the server to the client to report progress on a long-running operation initiated by a request.\nParameters (ProgressParams):\ntoken (string, required): The progress token associated with the request. value (any, required): The progress payload, specific to the operation being reported. notifications/roots/list_changed Sent from the client to the server when the list of available roots has changed.\nParameters (RootsListChangedParams):\n(None) - The params object is empty. notifications/tools/list_changed Sent from the server to the client when the list of available tools has changed.\nParameters (ToolsListChangedParams):\n(None) - The params object is empty. notifications/resources/list_changed Sent from the server to the client when the list of available resources has changed.\nParameters (ResourcesListChangedParams):\n(None) - The params object is empty. notifications/prompts/list_changed Sent from the server to the client when the list of available prompts has changed.\nParameters (PromptsListChangedParams):\n(None) - The params object is empty. (Other notification message details will go here)","protocol-messages#Protocol Messages":"Protocol MessagesThis document describes the core JSON-RPC messages used in the Model Context Protocol (MCP).","request-messages#Request Messages":"initialize Sent from the client to the server to initiate the connection and exchange capabilities.\nParameters (InitializeRequestParams):\nprotocolVersion (string, required): The protocol version the client supports. capabilities (object, required): The capabilities the client supports (ClientCapabilities). clientInfo (object, required): Information about the client implementation (Implementation). trace (string, optional): Trace setting (‘off’, ‘messages’, ‘verbose’). workspaceFolders (array, optional): Workspace folders opened by the client (WorkspaceFolder[]). Result (InitializeResult): See Response Messages section.\nlogging/set_level Sent from the client to the server to request a change in the server’s logging verbosity.\nParameters (SetLevelRequestParams):\nlevel (string, required): The desired logging level (\"error\", \"warn\", \"info\", \"debug\", \"trace\"). Result:\n(None) - A successful response has an empty result. sampling/create_message Sent from the client to the server to request a model-generated message based on a provided context.\nParameters (CreateMessageRequestParams):\ncontext (array, required): A list of messages (SamplingMessage[]) providing the conversation history or context. Each message has role (string), content (array of Content objects), and optional name (string). preferences (object, optional): Desired model characteristics (ModelPreferences), including modelUri, temperature, topP, topK. Result (CreateMessageResult): See Response Messages section.\nroots/list Sent from the server to the client to request the list of available root contexts (e.g., workspace folders, open files).\nParameters (ListRootsRequestParams):\n(None) - The params object is currently empty. Result (ListRootsResult): See Response Messages section.\n(Other request message details will go here)","response-messages#Response Messages":"initialize (Result) The successful response to an initialize request.\nPayload (InitializeResult):\nprotocolVersion (string, required): The protocol version the server supports. capabilities (object, required): The capabilities the server supports (ServerCapabilities). serverInfo (object, required): Information about the server implementation (Implementation). instructions (string, optional): Optional instructions for the client after initialization. sampling/create_message (Result) The successful response to a sampling/create_message request.\nPayload (CreateMessageResult):\nmessage (object, required): The generated message from the model (SamplingMessage). modelHint (object, optional): Information about the model used (ModelHint), including modelUri, inputTokens, outputTokens, finishReason. roots/list (Result) The successful response to a roots/list request.\nPayload (ListRootsResult):\nroots (array, required): A list of root contexts (Root[]) available on the client. Each root has uri, optional kind, title, description, and metadata. (Other response message details will go here)"},"title":"Protocol Messages"},"/examples/protocol_prompts/":{"data":{"notification-messages#Notification Messages":"notifications/prompts/list_changed Sent from the server to the client when the set of available prompts has changed (e.g., prompts added or removed). The client should typically re-fetch the prompt list using prompts/list.\nParameters (PromptsListChangedParams):\n(None) - The params object is empty. ","prompt-definition-prompt#Prompt Definition (\u003ccode\u003ePrompt\u003c/code\u003e)":"Protocol PromptsMCP servers can expose named prompts, which represent pre-defined instructions or templates that clients can utilize, often in conjunction with sampling requests. This document describes the protocol messages related to prompt discovery.\nPrompt Definition (Prompt) Represents a named prompt template provided by the server.\nuri (string, required): A unique identifier for the prompt. title (string, optional): A short, human-readable title. description (string, optional): A longer description of the prompt’s purpose. arguments (array, optional): A list of arguments (PromptArgument[]) that can be used to customize the prompt template. Each argument has: name (string, required) description (string, optional) type (string, required): e.g., “string”, “number”, “boolean”. required (boolean, optional) messages (array, required): The sequence of messages (PromptMessage[]) that make up the prompt template. Each message has: role (string, required): e.g., “system”, “user”, “assistant”. content (array, required): The content parts (Content[]) for the message. Content within prompts often includes template variables (syntax not defined by MCP core). metadata (object, optional): Additional arbitrary key-value pairs. ","protocol-prompts#Protocol Prompts":"","request-messages#Request Messages":"prompts/list Sent from the client to the server to retrieve a list of available prompts, potentially filtered. Supports pagination.\nParameters (ListPromptsRequestParams):\nfilter (object, optional): Criteria to filter the prompts (specific filter structure not defined by the core protocol). cursor (string, optional): A cursor from a previous response to fetch the next page. prompts/get Sent from the client to the server to retrieve a specific prompt definition, potentially resolving template arguments.\nParameters (GetPromptRequestParams):\nuri (string, required): The URI of the prompt to retrieve. arguments (object, optional): Values for the prompt’s arguments, used for server-side template resolution if supported. ","response-messages#Response Messages":"prompts/list (Result) The successful response to a prompts/list request.\nPayload (ListPromptsResult):\nprompts (array, required): A list of prompts (Prompt[]) matching the filter criteria for the current page. nextCursor (string, optional): A cursor for fetching the next page. Omitted if this is the last page. prompts/get (Result) The successful response to a prompts/get request.\nPayload (GetPromptResult):\nprompt (object, required): The requested Prompt definition. If arguments were provided in the request and the server supports template resolution, the messages content may be resolved. "},"title":"Protocol Prompts"},"/examples/protocol_resources/":{"data":{"notification-messages#Notification Messages":"notifications/resources/list_changed Sent from the server to the client when the set of available resources changes (e.g., resources added or removed). The client should typically re-fetch the resource list using resources/list.\nParameters (ResourcesListChangedParams):\n(None) - The params object is empty. notifications/resources/content_changed Sent from the server to the client when the content (and thus version) of a subscribed resource has changed.\nParameters (ResourceUpdatedParams):\nresource (object, required): The updated Resource object, containing the new version and potentially other changed metadata. The client should typically use resources/get to fetch the new content if needed. ","protocol-resources#Protocol Resources":"","request-messages#Request Messages":"resources/list Sent from the client to the server to retrieve a list of available resources, potentially filtered. Supports pagination.\nParameters (ListResourcesRequestParams):\nfilter (object, optional): Criteria to filter the resources (specific filter structure not defined by the core protocol). cursor (string, optional): A cursor from a previous response to fetch the next page. resources/get (Corresponds to resources/read in Go code) Sent from the client to the server to retrieve the content of a specific resource.\nParameters (ReadResourceRequestParams):\nuri (string, required): The URI of the resource to retrieve. version (string, optional): If provided, the server may return a “Not Modified” error if the resource version matches. resources/subscribe Sent from the client to the server to request notifications when the content of specific resources changes.\nParameters (SubscribeResourceParams):\nuris (array of strings, required): A list of resource URIs to subscribe to. resources/unsubscribe Sent from the client to the server to stop receiving notifications for specific resources.\nParameters (UnsubscribeResourceParams):\nuris (array of strings, required): A list of resource URIs to unsubscribe from. ","resource-definition-resource#Resource Definition (\u003ccode\u003eResource\u003c/code\u003e)":"Protocol ResourcesMCP servers can expose resources, which represent data sources that clients can access or subscribe to. This document describes the protocol messages related to resource discovery and access.\nResource Definition (Resource) Represents a data source provided by the server.\nuri (string, required): A unique identifier for the resource (e.g., file:///path/to/file, api://service/endpoint). kind (string, optional): A category or type hint for the resource (e.g., “file”, “api_spec”, “database_table”). title (string, optional): A short, human-readable title for the resource. description (string, optional): A longer description of the resource. version (string, optional): An opaque string representing the current version of the resource content. This should change whenever the content changes. metadata (object, optional): Additional arbitrary key-value pairs associated with the resource. ","response-messages#Response Messages":"resources/list (Result) The successful response to a resources/list request.\nPayload (ListResourcesResult):\nresources (array, required): A list of resources (Resource[]) matching the filter criteria for the current page. nextCursor (string, optional): A cursor for fetching the next page. Omitted if this is the last page. resources/get (Result - Corresponds to resources/read in Go code) The successful response to a resources/get request.\nPayload (ReadResourceResult):\nresource (object, required): The Resource object containing metadata (including the current version). contents (object, required): The actual content of the resource (ResourceContents). This will be either: TextResourceContents: Contains contentType (string) and content (string). BlobResourceContents: Contains contentType (string) and blob (string, base64 encoded). resources/subscribe (Result) The successful response to a resources/subscribe request.\nPayload (SubscribeResourceResult):\n(None) - The result object is currently empty upon success. resources/unsubscribe (Result) The successful response to an resources/unsubscribe request.\nPayload (UnsubscribeResourceResult):\n(None) - The result object is currently empty upon success. "},"title":"Protocol Resources"},"/protocol_tools/":{"data":{"notification-messages#Notification Messages":"notifications/tools/list_changed Sent from the server to the client when the set of available tools has changed (e.g., tools added or removed). The client should typically re-fetch the tool list using tools/list.\nParameters (ToolsListChangedParams):\n(None) - The params object is empty. ","protocol-tools#Protocol Tools":"","request-messages#Request Messages":"tools/list Sent from the client to the server to retrieve the list of available tools. Supports pagination.\nParameters (ListToolsRequestParams):\ncursor (string, optional): A cursor returned from a previous tools/list response to fetch the next page of results. tools/call Sent from the client to the server to execute a specific tool with provided arguments.\nParameters (CallToolParams):\nname (string, required): The name of the tool to execute. arguments (object, optional): A map containing the arguments for the tool, conforming to the tool’s inputSchema. _meta (object, optional): Metadata associated with the request (RequestMeta), potentially including a progressToken. ","response-messages#Response Messages":"tools/list (Result) The successful response to a tools/list request.\nPayload (ListToolsResult):\ntools (array, required): A list of available tools (Tool[]). nextCursor (string, optional): A cursor to use in a subsequent tools/list request to fetch the next page of results. If omitted, there are no more tools. tools/call (Result) The successful response to a tools/call request.\nPayload (CallToolResult):\ncontent (array, required): The result of the tool execution, represented as an array of Content objects (e.g., TextContent, ImageContent). isError (boolean, optional): If true, indicates the content represents an error message rather than a successful result. _meta (object, optional): Metadata associated with the response (RequestMeta). ","tool-definition-tool#Tool Definition (\u003ccode\u003eTool\u003c/code\u003e)":"Protocol ToolsMCP servers can expose tools that clients can execute. This document describes the protocol messages related to tool discovery and execution.\nTool Definition (Tool) Represents a tool offered by the server.\nname (string, required): The unique identifier for the tool. description (string, optional): A human-readable description of what the tool does. inputSchema (object, required): A JSON Schema (ToolInputSchema) defining the expected arguments for the tool. type (string, required): Typically “object”. properties (object, optional): A map where keys are argument names and values are PropertyDetail objects describing the argument (type, description, enum, format). required (array, optional): A list of required argument names (strings). annotations (object, optional): Optional hints about the tool’s behavior (ToolAnnotations). title (string, optional): Human-readable title. readOnlyHint (boolean, optional): Indicates if the tool only reads data. destructiveHint (boolean, optional): Indicates if the tool might modify or delete data. idempotentHint (boolean, optional): Indicates if calling the tool multiple times with the same arguments has the same effect as calling it once. openWorldHint (boolean, optional): Indicates if the tool interacts with external systems or the real world. "},"title":"Protocol Tools"}}